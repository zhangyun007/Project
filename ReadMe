一、系统需求：Python3


二、下载代码、运行测试

git clone https://github.com/zhangyun007/ZhScheme.git

运行python ZhScheme.py进入单行交互模式。

运行python ZhScheme.py test.s解释执行test.s文件，测试文件包括：scheme.s test.s new.s first.s 

扩展名为ss的文件可以运行在Racket和ChezScheme下，而不能运行在ZhScheme中。


三、文档说明

ZhScheme不符合任何一个Lisp，Scheme标准，作者无意实现一个符合某个标准的Scheme或者Lisp。ZhScheme更像Python，大量使用Python内置函数，数据结构和Python完全一样。


待完善功能：  
import直接执行http；递归函数调用层次太少；生成Lua虚拟机字节码


和Lisp/Scheme的一些区别（不完全）：


一、quote，用于注释。

取消了Symbol类型，使用python字符串。

二、define和set!

ZhScheme中，define只能定义函数，而变量直接用set定义并赋值，set可以一次定义/赋值多个变量。

三、bool类型

Scheme里bool值为#T和#F,ZheScheme直接使用Python的bool型 -- True和False

四、实现了C风格的while，for循环，循环体中可以使用break跳出循环。

五、取消了cons，实现了car和cdr

Scheme中的cons，作用是构造一个pair，包括左右两个值，在ChezScheme和Racket中，(cons 1 2)的输出是(1 . 2)，用.来区分左右两部分，car取得左值，cdr取得右值，可以对一个list取car和cdr。



单行交互模式

运行python ZhScheme.py，进入单行交互模式。按照惯例，打印hello world:

(print "hello , world!")

print是Python内置函数，可以直接使用。运行(env)查看内置函数，这些函数和变量可以直接使用：

E:\Project\ZhScheme>python ZhScheme.py
ZhScheme> (env)
['env']
env ...
+  :  <built-in function add>
-  :  <built-in function sub>
*  :  <built-in function mul>
/  :  <built-in function truediv>
>  :  <built-in function gt>
<  :  <built-in function lt>
>=  :  <built-in function ge>
<=  :  <built-in function le>
=  :  <built-in function eq>
not  :  <function <lambda> at 0x0000000002C2ABF8>
eq?  :  <built-in function is_>
equal?  :  <built-in function eq>
max  :  <built-in function max>
min  :  <built-in function min>
abs  :  <built-in function abs>
round  :  <built-in function round>
tuple  :  <function <lambda> at 0x0000000002C2A510>
dict  :  <function <lambda> at 0x0000000002C2A598>
car  :  <function <lambda> at 0x0000000002C2A620>
cdr  :  <function <lambda> at 0x0000000002C2A6A8>
list  :  <function <lambda> at 0x0000000002C2A730>
|  :  <function <lambda> at 0x0000000002C2A7B8>
append  :  <built-in function add>
len  :  <built-in function len>
map  :  <class 'map'>
print  :  <built-in function print>
exit  :  Use exit() or Ctrl-Z plus Return to exit
open  :  <built-in function open>
procedure?  :  <built-in function callable>
null?  :  <function <lambda> at 0x0000000002C2A840>
bool?  :  <function <lambda> at 0x0000000002C2A8C8>
number?  :  <function <lambda> at 0x0000000002C2A950>
string?  :  <function <lambda> at 0x0000000002C2A9D8>
tuple?  :  <function <lambda> at 0x0000000002C2AA60>
list?  :  <function <lambda> at 0x0000000002C2AAE8>
dict?  :  <function <lambda> at 0x0000000002C2AB70>
and  :  <function <lambda> at 0x0000000002C2AC80>
or  :  <function <lambda> at 0x0000000002C2AD08>
isa  :  <built-in function isinstance>
dir  :  <built-in function dir>
type  :  <class 'type'>
getattr  :  <built-in function getattr>
setattr  :  <built-in function setattr>
.  :  <function <lambda> at 0x0000000002C2AD90>
int  :  {}
__name__  :  math
__doc__  :  This module is always available.  It provides access to the
mathematical functions defined by the C standard.
__package__  :
__loader__  :  <class '_frozen_importlib.BuiltinImporter'>
__spec__  :  ModuleSpec(name='math', loader=<class '_frozen_importlib.BuiltinImp
orter'>, origin='built-in')
acos  :  <built-in function acos>
acosh  :  <built-in function acosh>
asin  :  <built-in function asin>
asinh  :  <built-in function asinh>
atan  :  <built-in function atan>
atan2  :  <built-in function atan2>
atanh  :  <built-in function atanh>
ceil  :  <built-in function ceil>
copysign  :  <built-in function copysign>
cos  :  <built-in function cos>
cosh  :  <built-in function cosh>
degrees  :  <built-in function degrees>
erf  :  <built-in function erf>
erfc  :  <built-in function erfc>
exp  :  <built-in function exp>
expm1  :  <built-in function expm1>
fabs  :  <built-in function fabs>
factorial  :  <built-in function factorial>
floor  :  <built-in function floor>
fmod  :  <built-in function fmod>
frexp  :  <built-in function frexp>
fsum  :  <built-in function fsum>
gamma  :  <built-in function gamma>
gcd  :  <built-in function gcd>
hypot  :  <built-in function hypot>
isclose  :  <built-in function isclose>
isfinite  :  <built-in function isfinite>
isinf  :  <built-in function isinf>
isnan  :  <built-in function isnan>
ldexp  :  <built-in function ldexp>
lgamma  :  <built-in function lgamma>
log  :  <built-in function log>
log1p  :  <built-in function log1p>
log10  :  <built-in function log10>
log2  :  <built-in function log2>
modf  :  <built-in function modf>
pow  :  <built-in function pow>
radians  :  <built-in function radians>
sin  :  <built-in function sin>
sinh  :  <built-in function sinh>
sqrt  :  <built-in function sqrt>
tan  :  <built-in function tan>
tanh  :  <built-in function tanh>
trunc  :  <built-in function trunc>
pi  :  3.141592653589793
e  :  2.718281828459045
tau  :  6.283185307179586
inf  :  inf
nan  :  nan
....
ZhScheme>(exit)


我们复习一下Python的数据类型，并学习使用set为一个变量赋值。

一、基本数据类型(和Python保持一致)：
int float bool string 

二、复合数据类型(和Python保持一致)：
list tuple dict

顺序 (begin (...) (...) (...))
begin -- 关键字，将依次计算各项，返回最后一项；可以嵌套使用。

条件 (if (1) (2) (3)) 
if -- 关键字，判断1的结果，如果为True，则计算2并返回，否则计算3并返回。
可以嵌套使用。


循环
while, for, break

for-each


时间 (time (..))  

time --- 关键字，time后只能有一项参数，运行参数项，并打印运行时间。
例如：(time (+ 4 5)) --- 计算”4+5“，并打印运行时间。

你可以用begin将一些列语句包装起来，作为time的参数:
(time (begin (...) (...) (...) (...)))

嵌套使用：
(time (begin (...) (time (...)) (...) (...)))


函数与lambda


class

程序设计者可以使用Python的type函数创建一个类，但是多数情况下，你应该使用class直接定义一个类，使用.操作符访问对象的成员。尽量避免使用type函数。


读写文件

读写文件直接使用Python的file对象，以下程序打开test.ss文件，并读取，打印：
(set f (open "test.ss" "r"))
(print (f.read))


其他特性：

一、无用变量的检测警告功能：

new.s文件中定义了一个没有被使用的变量和函数，解释器能够检测到，并给出警告：
(set abc 123)
(define (efg x) (x))

python ZhScheme.py new.s

E:\Project\ZhScheme>python ZhScheme.py new.s
45150
0
0:00:00.012001
Warn : [ abc ] is not used.
Warn : [ efg ] is not used.


递归函数和尾递归

  (define (sum x r)
      (if (eq? x 0)
          (print r)
          (sum (- x 1) (+ x r))
       )
    )
   (sum 150 0)

当使用以上求和递归时，超过200层就会出现错误提示:栈不够用。